{"version":3,"sources":["long.js"],"names":["global","factory","define","require","module","Long","low","high","unsigned","prototype","__isLong__","Object","defineProperty","value","enumerable","configurable","isLong","obj","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","isFinite","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","equals","other","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","toSigned"],"mappings":"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","file":"long.js","sourceRoot":"../../../../../../assets/Script/AtomFrame/ProtoBuf","sourcesContent":["/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/long.js for details\n */\n(function(global, factory) {\n\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\n        define([], factory);\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\n        module[\"exports\"] = factory();\n    /* Global */ else\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n\n})(this, function() {\n    \"use strict\";\n\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @constructor\n     */\n    function Long(low, high, unsigned) {\n\n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low | 0;\n\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high | 0;\n\n        /**\n         * Whether unsigned or not.\n         * @type {boolean}\n         * @expose\n         */\n        this.unsigned = !!unsigned;\n    }\n\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @expose\n     * @private\n     */\n    Long.prototype.__isLong__;\n\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n        value: true,\n        enumerable: false,\n        configurable: false\n    });\n\n    /**\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @inner\n     */\n    function isLong(obj) {\n        return (obj && obj[\"__isLong__\"]) === true;\n    }\n\n    /**\n     * Tests if the specified object is a Long.\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @expose\n     */\n    Long.isLong = isLong;\n\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromInt(value, unsigned) {\n        var obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if (cache = (0 <= value && value < 256)) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache)\n                UINT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value |= 0;\n            if (cache = (-128 <= value && value < 128)) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache)\n                INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @function\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromInt = fromInt;\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromNumber(value, unsigned) {\n        if (isNaN(value) || !isFinite(value))\n            return unsigned ? UZERO : ZERO;\n        if (unsigned) {\n            if (value < 0)\n                return UZERO;\n            if (value >= TWO_PWR_64_DBL)\n                return MAX_UNSIGNED_VALUE;\n        } else {\n            if (value <= -TWO_PWR_63_DBL)\n                return MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL)\n                return MAX_VALUE;\n        }\n        if (value < 0)\n            return fromNumber(-value, unsigned).neg();\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @function\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromNumber = fromNumber;\n\n    /**\n     * @param {number} lowBits\n     * @param {number} highBits\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @function\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromBits = fromBits;\n\n    /**\n     * @function\n     * @param {number} base\n     * @param {number} exponent\n     * @returns {number}\n     * @inner\n     */\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n    /**\n     * @param {string} str\n     * @param {(boolean|number)=} unsigned\n     * @param {number=} radix\n     * @returns {!Long}\n     * @inner\n     */\n    function fromString(str, unsigned, radix) {\n        if (str.length === 0)\n            throw Error('empty string');\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n            return ZERO;\n        if (typeof unsigned === 'number') {\n            // For goog.math.long compatibility\n            radix = unsigned,\n            unsigned = false;\n        } else {\n            unsigned = !! unsigned;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix');\n\n        var p;\n        if ((p = str.indexOf('-')) > 0)\n            throw Error('interior hyphen');\n        else if (p === 0) {\n            return fromString(str.substring(1), unsigned, radix).neg();\n        }\n\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n        var result = ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i),\n                value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = fromNumber(pow_dbl(radix, size));\n                result = result.mul(power).add(fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @function\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromString = fromString;\n\n    /**\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n     * @returns {!Long}\n     * @inner\n     */\n    function fromValue(val) {\n        if (val /* is compatible */ instanceof Long)\n            return val;\n        if (typeof val === 'number')\n            return fromNumber(val);\n        if (typeof val === 'string')\n            return fromString(val);\n        // Throws for non-objects, converts non-instanceof Long:\n        return fromBits(val.low, val.high, val.unsigned);\n    }\n\n    /**\n     * Converts the specified value to a Long.\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @returns {!Long}\n     * @expose\n     */\n    Long.fromValue = fromValue;\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ZERO = fromInt(0);\n\n    /**\n     * Signed zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ZERO = ZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UZERO = fromInt(0, true);\n\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UZERO = UZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ONE = fromInt(1);\n\n    /**\n     * Signed one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ONE = ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UONE = fromInt(1, true);\n\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UONE = UONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var NEG_ONE = fromInt(-1);\n\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.NEG_ONE = NEG_ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\n\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_VALUE = MAX_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\n\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MIN_VALUE = fromBits(0, 0x80000000|0, false);\n\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_VALUE = MIN_VALUE;\n\n    /**\n     * @alias Long.prototype\n     * @inner\n     */\n    var LongPrototype = Long.prototype;\n\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toInt = function toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toNumber = function toNumber() {\n        if (this.unsigned)\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n    LongPrototype.toString = function toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix');\n        if (this.isZero())\n            return '0';\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.eq(MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = fromNumber(radix),\n                    div = this.div(radixLong),\n                    rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            } else\n                return '-' + this.neg().toString(radix);\n        }\n\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n            rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower),\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n                digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero())\n                return digits + result;\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    };\n\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n    LongPrototype.getHighBits = function getHighBits() {\n        return this.high;\n    };\n\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @returns {number} Unsigned high bits\n     * @expose\n     */\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n        return this.high >>> 0;\n    };\n\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n    LongPrototype.getLowBits = function getLowBits() {\n        return this.low;\n    };\n\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @returns {number} Unsigned low bits\n     * @expose\n     */\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n        return this.low >>> 0;\n    };\n\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n        if (this.isNegative()) // Unsigned Longs are never negative\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) != 0)\n                break;\n        return this.high != 0 ? bit + 33 : bit + 1;\n    };\n\n    /**\n     * Tests if this Long's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isZero = function isZero() {\n        return this.high === 0 && this.low === 0;\n    };\n\n    /**\n     * Tests if this Long's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isNegative = function isNegative() {\n        return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * Tests if this Long's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isPositive = function isPositive() {\n        return this.unsigned || this.high >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isOdd = function isOdd() {\n        return (this.low & 1) === 1;\n    };\n\n    /**\n     * Tests if this Long's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isEven = function isEven() {\n        return (this.low & 1) === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.equals = function equals(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.eq = LongPrototype.equals;\n\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.notEquals = function notEquals(other) {\n        return !this.eq(/* validates */ other);\n    };\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n        return this.comp(/* validates */ other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n        return this.comp(/* validates */ other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n        return this.comp(/* validates */ other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.compare = function compare(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.eq(other))\n            return 0;\n        var thisNeg = this.isNegative(),\n            otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.negate = function negate() {\n        if (!this.unsigned && this.eq(MIN_VALUE))\n            return MIN_VALUE;\n        return this.not().add(ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @param {!Long|number|string} addend Addend\n     * @returns {!Long} Sum\n     * @expose\n     */\n    LongPrototype.add = function add(addend) {\n        if (!isLong(addend))\n            addend = fromValue(addend);\n\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xFFFF;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n        if (!isLong(subtrahend))\n            subtrahend = fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n        if (this.isZero())\n            return ZERO;\n        if (!isLong(multiplier))\n            multiplier = fromValue(multiplier);\n        if (multiplier.isZero())\n            return ZERO;\n        if (this.eq(MIN_VALUE))\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\n        if (multiplier.eq(MIN_VALUE))\n            return this.isOdd() ? MIN_VALUE : ZERO;\n\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xFFFF;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.divide = function divide(divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        if (divisor.isZero())\n            throw Error('division by zero');\n        if (this.isZero())\n            return this.unsigned ? UZERO : ZERO;\n        var approx, rem, res;\n        if (!this.unsigned) {\n            // This section is only relevant for signed longs and is derived from the\n            // closure library as a whole.\n            if (this.eq(MIN_VALUE)) {\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n                else if (divisor.eq(MIN_VALUE))\n                    return ONE;\n                else {\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                    var halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(ZERO)) {\n                        return divisor.isNegative() ? ONE : NEG_ONE;\n                    } else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            } else if (divisor.eq(MIN_VALUE))\n                return this.unsigned ? UZERO : ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative())\n                    return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            } else if (divisor.isNegative())\n                return this.div(divisor.neg()).neg();\n            res = ZERO;\n        } else {\n            // The algorithm below has not been made for unsigned longs. It's therefore\n            // required to take special care of the MSB prior to running it.\n            if (!divisor.unsigned)\n                divisor = divisor.toUnsigned();\n            if (divisor.gt(this))\n                return UZERO;\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n                return UONE;\n            res = UZERO;\n        }\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        rem = this;\n        while (rem.gte(divisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n                approxRes = fromNumber(approx),\n                approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero())\n                approxRes = ONE;\n\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.not = function not() {\n        return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.and = function and(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.or = function or(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.xor = function xor(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0)\n            return this;\n        else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            } else if (numBits === 32)\n                return fromBits(high, 0, this.unsigned);\n            else\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Converts this Long to signed.\n     * @returns {!Long} Signed long\n     * @expose\n     */\n    LongPrototype.toSigned = function toSigned() {\n        if (!this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @returns {!Long} Unsigned long\n     * @expose\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n        if (this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, true);\n    };\n\n    return Long;\n});\n"]}