{"version":3,"sources":["audioMgr.js"],"names":["cc","Class","extends","Component","properties","TAG","ctor","console","log","bgmAudioID","soundSearchPath","onLoad","onDestroy","setSoundSearchDir","dirname","getUrl","name","path","url","raw","playMusic","audioName","callback","audioEngine","stop","musicVolume","Atom","gameConfMgr","getInfo","_path","play","setFinishCallback","playEffect","effectVolume","effectid","setMusicVolume","volume","setInfo","setVolume","setEffectVolume","pauseAll","resumeAll","stopAll","unCacheAll","uncacheAll","preload","call","setMaxAudioInstance","size","setMaxWebAudioSize"],"mappings":"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","file":"audioMgr.js","sourceRoot":"../../../../../assets/Script/AtomFrame","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        TAG: \"audioMgr\",\n    },\n\n    ctor: function () {\n        console.log(\"-new:\" + this.TAG);\n        this.bgmAudioID = -1; //背景音乐ID\n        this.soundSearchPath = \"sounds/\";\n    },\n\n    onLoad: function () {\n        console.log(\"-load:\" + this.TAG);\n    },\n\n    onDestroy: function () {\n        console.log(\"-destory:\" + this.TAG);\n    },\n\n\n    //creator 的音频统一是用 cc.audioEngine ,\n    setSoundSearchDir: function (dirname) {\n        this.soundSearchPath = dirname + \"/\";\n    },\n    \n    getUrl: function (name) {\n        var path = \"resources/\" + this.soundSearchPath + name\n        return cc.url.raw(path);\n    },\n\n    //音乐播放\n    playMusic: function (audioName , callback) {\n        if(this.bgmAudioID != -1){\n            cc.audioEngine.stop(this.bgmAudioID)\n            console.log(\" audio : stopMusic\")\n        }\n        var musicVolume = cc.Atom.gameConfMgr.getInfo(\"musicVolume\")\n        var _path = this.getUrl(audioName)\n        console.log(\" audio : \", _path , musicVolume)\n        this.bgmAudioID = cc.audioEngine.play(_path, true ,musicVolume)\n        if (callback) {\n            cc.audioEngine.setFinishCallback(this.bgmAudioID , callback)\n        }\n    },\n    //音效的播放\n    playEffect: function (audioName , callback) {\n        var effectVolume = cc.Atom.gameConfMgr.getInfo(\"effectVolume\")\n        var _path = this.getUrl(audioName)\n        console.log(\" audio : \", _path, effectVolume)\n        var effectid = cc.audioEngine.play(_path , false ,effectVolume)        \n        if (callback) {\n            cc.audioEngine.setFinishCallback(this.bgmAudioID, callback)\n        }\n    },\n\n    setMusicVolume: function (volume) {\n        console.log(\" music volume :\", volume)\n        var musicVolume = cc.Atom.gameConfMgr.getInfo(\"musicVolume\")\n        if(musicVolume == volume){\n            return ;\n        }\n\n        cc.Atom.gameConfMgr.setInfo(\"musicVolume\", volume)\n        // if(this.bgmAudioID > 0){\n        //     cc.audioEngine.pause(this.bgmAudioID)\n        // }\n\n        cc.audioEngine.setVolume(this.bgmAudioID ,volume)\n        // cc.audioEngine.resume(this.bgmAudioID , volume);\n    },\n\n    setEffectVolume: function (volume) {\n        console.log(\" effect volume :\",volume)\n        cc.Atom.gameConfMgr.setInfo(\"effectVolume\", volume)\n    },\n\n    //操作某一个音频的 看API\n    pauseAll: function () {\n        cc.audioEngine.pauseAll();\n    },\n\n    resumeAll: function () {\n        cc.audioEngine.resumeAll();\n    },\n\n    stopAll: function () {\n        cc.audioEngine.stopAll();\n    },\n\n    unCacheAll: function () {\n        cc.audioEngine.uncacheAll();\n    },\n\n    preload: function(path, callback){\n        var call = callback ? callback : function () {\n            console.log(\" ---- preload call !\")\n        };\n        cc.audioEngine.preload(path,call)\n    },\n\n    //音频实例上线\n    setMaxAudioInstance: function (size) {\n        cc.audioEngine.setMaxAudioInstance(size)\n    },\n\n    //大于 X KB 的音频在加载的时候会强制使用 dom 方式加载\n    setMaxWebAudioSize: function (size) {\n        cc.audioEngine.setMaxWebAudioSize(size);\n    },\n\n});\n"]}